BEGIN_DERIVED_SCENE(MaterialTestPointLight, MaterialTestBase)
SETUP_SCENE(
    MaterialTestBase::setup();
    tracer->rays_per_pixel = 10;
);
BUILD_SCENE(
    MaterialTestBase::buildScene();
    scene->addPointLight( PointLight( Vector4( -5.0, 5.0, 5.0 ),
                          RGBColor( 1.0, 1.0, 1.0 ).scaled(30.0) ) );
    scene->addPointLight( PointLight( Vector4( 5.0, 5.0, 5.0 ),
                          RGBColor( 1.0, 1.0, 1.0 ).scaled(30.0) ) );
);
END_SCENE()

// ------------------------------------------------------------ 
BEGIN_DERIVED_SCENE(MaterialTestDiffuseWhitePointLight, MaterialTestPointLight)
SETUP_SCENE(
    MaterialTestPointLight::setup();
    tracer->shader = new BasicDiffuseSpecularShader();
);
BUILD_SCENE(
    MaterialTestPointLight::buildScene();
    mesh->material = std::make_shared<DiffuseMaterial>( 1.0, 1.0, 1.0 );
);
END_SCENE()

// ------------------------------------------------------------ 
BEGIN_DERIVED_SCENE(MaterialTestMirrorPointLight, MaterialTestPointLight)
SETUP_SCENE(
    MaterialTestPointLight::setup();
    tracer->shader = new BasicDiffuseSpecularShader();
);
BUILD_SCENE(
    MaterialTestPointLight::buildScene();
    mesh->material = std::make_shared<MirrorMaterial>();
);
END_SCENE()

// ------------------------------------------------------------ 
BEGIN_DERIVED_SCENE(MaterialTestRefractPointLight, MaterialTestPointLight)
SETUP_SCENE(
    MaterialTestPointLight::setup();
    tracer->shader = new BasicDiffuseSpecularShader();
);
BUILD_SCENE(
    MaterialTestPointLight::buildScene();
    mesh->material = std::make_shared<RefractiveMaterial>(N_WATER);
);
END_SCENE()

// ------------------------------------------------------------ 
BEGIN_DERIVED_SCENE(MaterialTestRefractPointLightSweepIOR, MaterialTestMontageBase)
SETUP_SCENE(
    MaterialTestMontageBase::setup();
    tracer->shader = new BasicDiffuseSpecularShader();
    tracer->rays_per_pixel = 10;
);
BUILD_SCENE(
    MaterialTestMontageBase::buildScene();
    float min_ior = 1.0; float max_ior = 1.1;
    for( int mesh_index = 0; mesh_index < num_meshes; mesh_index++ ) {
        float ior = (float) mesh_index / (num_meshes - 1) * (max_ior - min_ior) + min_ior;
        meshes[mesh_index]->material = std::make_shared<RefractiveMaterial>(ior);
    }
    scene->addPointLight( PointLight( Vector4( -5.0, 5.0, 5.0 ),
                          RGBColor( 1.0, 1.0, 1.0 ).scaled(100.0) ) );
);
END_SCENE()


