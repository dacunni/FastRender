BEGIN_SCENE(MaterialTestMontageTwoParamBase)
SETUP_SCENE(
    int image_size = 256;
    float aspect_ratio = 2;
    image_width = image_size * aspect_ratio;
    image_height = image_size;
    TestScene::setup();
    tracer->rays_per_pixel = 1;
    float half_fov_y = 0.03;
    float half_fov_x = aspect_ratio * half_fov_y;
    tracer->camera.setFocalPlaneDimensions( -half_fov_x, half_fov_x, -half_fov_y, half_fov_y );

    // Don't show the preview window, because we currently have no way to
    // make it close when complete. It will therefor force the first test
    // to hang indefinitely when complete.
    tracer->show_preview_window = showPreviewWindow;

    if( animateMaterialTests ) {
        tracer->num_frames = 32;
        tracer->loopable_animations = true;
        tracer->setCameraTransform(
                [](float anim_progress) { return compose(
                        // move up a bit
                        makeTranslation( 0.0, 0.5, 0.0 ),
                        //makeRotation( M_PI / 8.0f * sinf(2.0f*M_PI*anim_progress), Vector4(0, 1, 0) ), // wiggle
                        makeRotation( 2.0f * M_PI * anim_progress, Vector4(0, 1, 0) ), // orbit
                        // rotate so we are looking down
                        makeRotation( -0.2, Vector4(1, 0, 0) ),
                        // back away from the origin
                        makeTranslation( 0.0, 0.0, 5.0 )
                    );});
    }
    else {
        tracer->setCameraTransform( compose(
            // move up a bit
            makeTranslation( 0.0, 0.5, 0.0 ),
            // rotate to get an angle on the objects
            //makeRotation( M_PI / 8.0, Vector4(0, 1, 0) ),
            // rotate so we are looking down
            makeRotation( -0.5, Vector4(1, 0, 0) ),
            // back away from the origin
            makeTranslation( 0.0, 0.0, 100.0 )
            ) );
    }
    //tracer->shader = new BasicDiffuseSpecularShader();
    tracer->shader = new AmbientOcclusionShader();
    //tracer->shader = new GoochShader();
);
static const int array_dim = 8;
static const int num_meshes = array_dim * array_dim;
std::shared_ptr<TriangleMesh> meshes[num_meshes];
std::shared_ptr<TriangleMesh> & meshAtIndex(int index, float & param1, float & param2) {
    int i1 = index / array_dim;
    int i2 = index - i1 * array_dim;

    param1 = (float) i1 / (array_dim - 1);
    param2 = (float) i2 / (array_dim - 1);

    return meshes[index];
}
BUILD_SCENE(
    auto floor = std::make_shared<AxisAlignedSlab>( -10, -1, -10,
                                                     10, 0, 10 );
#if 1
    container->add( floor );
#else
    auto checkerboard_material = std::make_shared<DiffuseCheckerBoardMaterial>( 1.0, 1.0, 1.0 );
    checkerboard_material->gridSize = 1.0;
    container->add( floor, checkerboard_material );
#endif

    const bool use_bvh = true;
    std::shared_ptr<FlatContainer> bvh_temp_container;
    if(use_bvh) { bvh_temp_container = std::make_shared<FlatContainer>(); }

    float param1; float param2;
    for( int mesh_index = 0; mesh_index < num_meshes; mesh_index++ ) {
        meshes[mesh_index] = loadMaterialTestModel( loader );
        auto mesh = meshAtIndex(mesh_index, param1, param2);
        auto bounds = mesh->getAxisAlignedBounds();

        mesh->transform = std::make_shared<Transform>();

        const float extents = 5.0;
        const float xmin = -extents; const float xmax = +extents;
        const float zmin = -extents; const float zmax = +extents;
        auto mesh_shift = makeTranslation( param1 * (xmax - xmin) + xmin, 0.0, param2 * (zmax - zmin) + zmin );
#if 1
        *mesh->transform = compose( mesh_shift,
                                    makeScaling( 1.0 ),
                                    makeTranslation( Vector4( 0.0, -bounds->ymin, 0.0 ) ) );
#else // Mori test object
        *mesh->transform = compose( mesh_shift,
                                    makeScaling( 1.0 ),
                                    makeTranslation( Vector4( 0.0, -bounds->ymin, 0.0 ) ),
                                    makeRotation( M_PI * 0.85, Vector4( 0.0, 1.0, 0.0 ) ) );
#endif
        if(use_bvh) { bvh_temp_container->add( mesh ); }
        else        { container->add( mesh ); }
    }

    if(use_bvh) {
        auto bvh = std::make_shared<BoundingVolumeHierarchy>();
        bvh->build( bvh_temp_container );
        container->add( bvh );
    }
    
);
END_SCENE()

