
bool animateMaterialTests = false;
bool stereoMaterialTests = false;
bool showPreviewWindow = false;
bool useOmniCamera = false;

BEGIN_SCENE(MaterialTestBase)
SETUP_SCENE(
    if( useOmniCamera ) {
        float aspect_ratio = 2;
        image_height = 256;
        image_width = aspect_ratio * image_height;
        TestScene::setup();
        tracer->rays_per_pixel = 5;
        auto camera = std::make_shared<OmniCamera>( M_PI * 2.0, M_PI, image_width, image_height );
        tracer->camera = camera;
    }
    else {
        //image_width = image_height = 64;
        TestScene::setup();
        tracer->rays_per_pixel = 5;
    }

    // Don't show the preview window, because we currently have no way to
    // make it close when complete. It will therefor force the first test
    // to hang indefinitely when complete.
    tracer->show_preview_window = showPreviewWindow;

    if( animateMaterialTests ) {
        tracer->num_frames = 32;
        tracer->loopable_animations = true;
        tracer->setCameraTransform(
                [](float anim_progress) { return compose(
                        // move up a bit
                        makeTranslation( 0.0, 0.5, 0.0 ),
                        //makeRotation( M_PI / 8.0f * sinf(2.0f*M_PI*anim_progress), Vector4(0, 1, 0) ), // wiggle
                        makeRotation( 2.0f * M_PI * anim_progress, Vector4(0, 1, 0) ), // orbit
                        // rotate so we are looking down
                        makeRotation( -0.2, Vector4(1, 0, 0) ),
                        // back away from the origin
                        makeTranslation( 0.0, 0.0, 5.0 )
                    );});
    }
    else if( stereoMaterialTests ) {
        tracer->num_frames = 2;
        tracer->loopable_animations = true;
        tracer->setCameraTransform(
                [](float anim_progress) { 
                    float fullrot = 0.1;
                    return compose(
                        // move up a bit
                        makeTranslation( 0.0, 0.5, 0.0 ),
                        makeRotation( -fullrot * 0.5 + fullrot * anim_progress, Vector4(0, 1, 0) ),
                        // rotate so we are looking down
                        makeRotation( -0.2, Vector4(1, 0, 0) ),
                        // back away from the origin
                        makeTranslation( 0.0, 0.0, 5.0 )
                    );});
    }
    else {
        if(useOmniCamera) {
            tracer->setCameraTransform( compose(
                // move up a bit
                makeTranslation( 0.0, 0.5, 0.0 ),
                // rotate so we are looking down
                makeRotation( -0.2, Vector4(1, 0, 0) ),
                // back away from the origin
                makeTranslation( 0.0, 0.0, 1.0 )
                ) );
        }
        else {
            tracer->setCameraTransform( compose(
                // move up a bit
                makeTranslation( 0.0, 0.5, 0.0 ),
                // rotate so we are looking down
                makeRotation( -0.2, Vector4(1, 0, 0) ),
                // back away from the origin
                makeTranslation( 0.0, 0.0, 5.0 )
                ) );
        }
    }
    //tracer->shader = new BasicDiffuseSpecularShader();
    tracer->shader = new AmbientOcclusionShader();
);
std::shared_ptr<TriangleMesh> mesh;
std::shared_ptr<Sphere> diffuseReference;
std::shared_ptr<Sphere> mirrorReference;
BUILD_SCENE(
    auto floor = std::make_shared<AxisAlignedSlab>( -10, -1, -10,
                                                     10, 0, 10 );
    auto floor_material = std::make_shared<DiffuseMaterial>( 1.0, 1.0, 1.0 );
    //auto floor_material = std::make_shared<DiffuseCheckerBoardMaterial>( 0.2, 0.2, 0.2, 0.8, 0.8, 0.8 );
    container->add( floor, floor_material );

    mesh = loadMaterialTestModel( loader );
    auto bounds = mesh->getAxisAlignedBounds();
    mesh->transform = std::make_shared<Transform>();
#if 1
    *mesh->transform = compose( makeScaling( 1.0 ),
                                makeTranslation( Vector4( 0.0, -bounds->ymin, 0.0 ) ) );
#else // Mori test object
    *mesh->transform = compose( makeScaling( 1.0 ),
                                makeTranslation( Vector4( 0.0, -bounds->ymin, 0.0 ) ),
                                makeRotation( -M_PI * 0.50, Vector4( 1.0, 0.0, 0.0 ) )
                              );
#endif
    container->add( mesh );

    // Reference objects
    float sradius = 0.15;
    float xoffset = 0.5; float zoffset = 0.5;
    diffuseReference = std::make_shared<Sphere>( xoffset, sradius, zoffset, sradius );
    container->add( diffuseReference, std::make_shared<DiffuseMaterial>( 1.0, 1.0, 1.0 ) );
    mirrorReference = std::make_shared<Sphere>( -xoffset, sradius, zoffset, sradius );
    container->add( mirrorReference, std::make_shared<MirrorMaterial>() );
);
END_SCENE()

