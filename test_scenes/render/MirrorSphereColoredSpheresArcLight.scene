BEGIN_SCENE( MirrorSphereColoredSpheresArcLight )
SETUP_SCENE(
    image_width = image_height = 256;
    TestScene::setup();
    tracer->rays_per_pixel = 40;
);
BUILD_SCENE(
    auto floor = std::make_shared<AxisAlignedSlab>( -10.0, +0.0, +10.0,
                                                    +10.0, -1.0, -10.0 );
    container->add( floor );

    std::shared_ptr<Sphere> sphere;

    sphere = std::make_shared<Sphere>( -2, 0.25, 0.5, 0.25 );
    sphere->material = std::make_shared<DiffuseMaterial>( 1.0, 0.5, 0.5 );
    container->add( sphere );

    sphere = std::make_shared<Sphere>( 0, 0.50, 1.5, 0.50 );
    sphere->material = std::make_shared<DiffuseMaterial>( 0.5, 1.0, 0.5 );
    container->add( sphere );

    sphere = std::make_shared<Sphere>( -1, 0.75, 0, 0.75  );
    sphere->material = std::make_shared<MirrorMaterial>();
    container->add( sphere );

    sphere = std::make_shared<Sphere>( +1, 1.00, 0, 1.00 );
    sphere->material = std::make_shared<DiffuseMaterial>( 0.5, 0.5, 1.0 );
    container->add( sphere );

	scene->root = container;
    scene->env_map = std::make_shared<ArcLightEnvironmentMap>();
    tracer->scene = scene;

    tracer->shader = new BasicDiffuseSpecularShader();

    // Camera back and rotated a bit around x so we're looking slightly down
    Transform rotation = makeRotation( -0.2, Vector4(1, 0, 0) );
    Transform translation = makeTranslation( 0.0, 0.0, 18.0 );
    tracer->setCameraTransform( compose( rotation, translation ) );

);
END_SCENE()
