BEGIN_SCENE( RefractiveSphereEmissiveObjectCaustic )
SETUP_SCENE(
    image_width = image_height = 256;
    TestScene::setup();
    tracer->rays_per_pixel = 100;
);
BUILD_SCENE(
    auto floor = std::make_shared<AxisAlignedSlab>( -10.0, 0.0, +10.0,
                                                    +10.0, -1.0, -10.0 );
    container->add( floor );

    auto sphere = std::make_shared<Sphere>( 0.0, 1.25, 0.0, 1.0 );
    sphere->material = std::make_shared<RefractiveMaterial>(1.4);
    container->add( sphere );

    auto foo = std::make_shared<AxisAlignedSlab>( -0.5, -0.5, -0.5, 1.0 );
    foo->material = std::make_shared<RefractiveMaterial>(1.1);
    foo->transform = std::make_shared<Transform>();
    *foo->transform = compose( makeTranslation( Vector4( 1.5, 0.75, 0.0 ) ),
                                //makeRotation( -0.8 * M_PI, Vector4(0, 1, 0) ) );
                                makeRotation( 0.0, Vector4(0, 1, 0) ) );
    container->add( foo );

    // Light
    auto cube = std::make_shared<AxisAlignedSlab>( 2.0, 2.5, -1.0,
                                                   4.0, 4.5,  1.0 );
    cube->material = std::make_shared<DiffuseEmitterMaterial>(RGBColor(1, 1, 1).scaled(5));
    container->add( cube );

    tracer->shader = new BasicDiffuseSpecularShader();

    // Camera back and rotated a bit around x so we're looking slightly down
    Transform rotation = makeRotation( -M_PI / 8, Vector4(1, 0, 0) );
    Transform translation = makeTranslation( 0.0, 0.0, 18.0 );
    tracer->setCameraTransform( compose( rotation, translation ) );
);
END_SCENE()
