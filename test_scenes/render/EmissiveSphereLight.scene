BEGIN_SCENE( EmissiveSphereLight )
SETUP_SCENE(
    image_width = image_height = 256;
    TestScene::setup();
    tracer->rays_per_pixel = 40;
);
void addSphereLight( std::shared_ptr<Container> container,
                     const Vector4 & center, float r,
                     const RGBColor & color,
                     float power )
{
    auto emitter = std::make_shared<Sphere>( center, r );
    emitter->material = std::make_shared<Material>();
    emitter->material->emittance = color;
    emitter->material->emittance.scale( power );
    container->add( emitter );
}
BUILD_SCENE(
    auto floor = std::make_shared<AxisAlignedSlab>( -10.0, +0.0, +10.0,
                                                   +10.0, -1.0, -10.0 );
    container->add( floor );

    container->add( std::make_shared<Sphere>( -2, 0.25, 0, 0.25 ) );
    container->add( std::make_shared<Sphere>( -1, 0.50, 0, 0.50 ) );
    container->add( std::make_shared<Sphere>( +1, 1.00, 0, 1.00 ) );

    addSphereLight( container,
                    Vector4( 5.0, 5.0, 5.0 ), 2.5,
                    RGBColor( 1.0, 1.0, 1.0 ), 15.0 );

    tracer->shader = new BasicDiffuseSpecularShader();

    // Camera back and rotated a bit around x so we're looking slightly down
    Transform rotation = makeRotation( -M_PI / 8, Vector4(1, 0, 0) );
    Transform translation = makeTranslation( 0.0, 0.0, 18.0 );
    tracer->setCameraTransform( compose( rotation, translation ) );
);
END_SCENE()
