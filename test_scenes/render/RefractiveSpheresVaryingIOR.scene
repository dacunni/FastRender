BEGIN_SCENE( RefractiveSpheresVaryingIOR )
SETUP_SCENE(
    int image_size = 100;
    image_width = image_size * 4;
    image_height = image_size;
    TestScene::setup();
    tracer->rays_per_pixel = 100;
    tracer->camera.setFocalPlaneDimensions( -0.45, 0.45, -0.15, 0.15 );
);
BUILD_SCENE(
    auto floor = std::make_shared<AxisAlignedSlab>( -10.0, +0.0, +10.0,
                                                    +10.0, -1.0, -10.0 );
    container->add( floor );

    std::shared_ptr<Sphere> sphere;
    float y = 1.5; float z = 2.0; float radius = 1.0;

    sphere = std::make_shared<Sphere>( -4, y, z, radius );
    sphere->material = std::make_shared<RefractiveMaterial>(1.3);
    container->add( sphere );

    sphere = std::make_shared<Sphere>( -2, y, z, radius );
    sphere->material = std::make_shared<RefractiveMaterial>(1.49);
    container->add( sphere );

    sphere = std::make_shared<Sphere>( 0, y, z, radius );
    sphere->material = std::make_shared<RefractiveMaterial>(1.6);
    container->add( sphere );

    sphere = std::make_shared<Sphere>( +2, y, z, radius );
    sphere->material = std::make_shared<RefractiveMaterial>(2.1);
    container->add( sphere );

    sphere = std::make_shared<Sphere>( +4, y, z, radius );
    sphere->material = std::make_shared<RefractiveMaterial>(2.5);
    container->add( sphere );

    // Colored strips to show refraction from background objects
    auto cube = std::make_shared<AxisAlignedSlab>( -10.0, 0.0, -2.0,
                                     +10.0, 0.15, -2.15 );
    cube->material = std::make_shared<DiffuseMaterial>( 0.5, 0.5, 1.0 );
    container->add( cube );

    cube = std::make_shared<AxisAlignedSlab>( -10.0, 0.5 + 0.0, -2.0,
                                +10.0, 0.5 + 0.15, -2.15 );
    cube->material = std::make_shared<DiffuseMaterial>( 1.0, 0.5, 0.0 );
    container->add( cube );

    cube = std::make_shared<AxisAlignedSlab>( -10.0, 1.0 + 0.0, -2.0,
                                +10.0, 1.0 + 0.15, -2.15 );
    cube->material = std::make_shared<DiffuseMaterial>( 0.0, 1.0, 0.5 );
    container->add( cube );

    auto env_map = std::make_shared<ArcLightEnvironmentMap>( Vector4(0, 1, 0), M_PI * 0.1 );
    env_map->setPower( 3.0f );
    scene->env_map = env_map;

    tracer->shader = new BasicDiffuseSpecularShader();

    // Camera back and rotated a bit around x so we're looking slightly down
    Transform rotation = makeRotation( -0.2, Vector4(1, 0, 0) );
    Transform translation = makeTranslation( 0.0, 1.0, 15.0 );
    tracer->setCameraTransform( compose( rotation, translation ) );
);
END_SCENE()
