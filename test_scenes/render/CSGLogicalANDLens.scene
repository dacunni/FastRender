
// Base test configuration for a lens made from the logical AND of two spheres
// Derived tests change the index of refraction
BEGIN_SCENE(CSGLogicalANDLens)
    float index_of_refraction = 1.3;
SETUP_SCENE(
    TestScene::setup();
    tracer->rays_per_pixel = 50;
    tracer->shader = new BasicDiffuseSpecularShader();
    tracer->setCameraTransform( compose(
        // move up a bit
        makeTranslation( 0.0, 1.0, 0.0 ),
        // rotate so we are looking down
        makeRotation( -M_PI / 32, Vector4(1, 0, 0) ),
        // back away from the origin
        makeTranslation( 0.0, 0.0, 10.0 )
        ) );
);
std::shared_ptr<TriangleMesh> mesh = nullptr;
BUILD_SCENE(
    // Ground plane at y=0
    auto floor = std::make_shared<AxisAlignedSlab>( -10.0, +0.0, +10.0,
                                                   +10.0, -1.0, -10.0 );
    container->add( floor );

    auto obj1 = std::make_shared<Sphere>( -9.95, 1.00, 0, 10.00 );
    auto obj2 = std::make_shared<Sphere>( +9.95, 1.00, 0, 10.00 );
    auto logical = std::make_shared<CSGAnd>( obj1, obj2 );
    logical->material = std::make_shared<RefractiveMaterial>(index_of_refraction);
    logical->transform = std::make_shared<Transform>();
    *logical->transform = makeRotation( -M_PI / 2, Vector4(0, 1, 0) );
    container->add( logical );

    // Colored strips to show refraction from background objects
    auto cube = std::make_shared<AxisAlignedSlab>( -10.0, 0.0, -5.0, +10.0, 0.15, -5.15 );
    cube->material = std::make_shared<DiffuseMaterial>( 0.5, 0.5, 1.0 );
    container->add( cube );
    cube = std::make_shared<AxisAlignedSlab>( -10.0, 0.5 + 0.0, -5.0, +10.0, 0.5 + 0.15, -5.15 );
    cube->material = std::make_shared<DiffuseMaterial>( 1.0, 0.5, 0.0 );
    container->add( cube );
    cube = std::make_shared<AxisAlignedSlab>( -10.0, 1.0 + 0.0, -5.0, +10.0, 1.0 + 0.15, -5.15 );
    cube->material = std::make_shared<DiffuseMaterial>( 0.0, 1.0, 0.5 );
    container->add( cube );

    //auto env_map = std::make_shared<ArcLightEnvironmentMap>( Vector4(1, 1, 1), M_PI * 0.4 );
    //scene->env_map = env_map;
    scene->env_map = std::make_shared<TestPatternEnvironmentMap>();
);
END_SCENE()

// ------------------------------------------------------------ 
BEGIN_DERIVED_SCENE(CSGLogicalANDLensWater, CSGLogicalANDLens)
SETUP_SCENE(
    CSGLogicalANDLens::setup();
    index_of_refraction = N_WATER;
);
BUILD_SCENE(
    CSGLogicalANDLens::buildScene();
);
END_SCENE()

// ------------------------------------------------------------ 
BEGIN_DERIVED_SCENE(CSGLogicalANDLensCrownGlass, CSGLogicalANDLens)
SETUP_SCENE(
    CSGLogicalANDLens::setup();
    index_of_refraction = N_CROWN_GLASS;
);
BUILD_SCENE(
    CSGLogicalANDLens::buildScene();
);
END_SCENE()

// ------------------------------------------------------------ 
BEGIN_DERIVED_SCENE(CSGLogicalANDLensFlintGlass, CSGLogicalANDLens)
SETUP_SCENE(
    CSGLogicalANDLens::setup();
    index_of_refraction = N_FLINT_GLASS;
);
BUILD_SCENE(
    CSGLogicalANDLens::buildScene();
);
END_SCENE()

