BEGIN_SCENE( RefractiveBunniesVaryingIOR )
SETUP_SCENE(
    int image_size = 320;
    float aspect_ratio = 4.0f;
    image_width = image_size * aspect_ratio;
    image_height = image_size;
    TestScene::setup();
    tracer->rays_per_pixel = 100;
    tracer->camera.setFocalPlaneDimensions( 0.3 * aspect_ratio, 0.3 );
);
BUILD_SCENE(
    auto floor = std::make_shared<AxisAlignedSlab>( -10.0, +0.0, +10.0,
                                                    +10.0, -1.0, -10.0 );
    container->add( floor );

    std::shared_ptr<TriangleMesh> mesh;

    Transform rotation = makeRotation( M_PI / 4.0, Vector4(0, 1, 0) );
    float spacing = 2.0;

    // high res
    std::string model = "models/stanford/bunny/reconstruction/bun_zipper.ply";
    // low res
    //std::string model = "models/stanford/bunny/reconstruction/bun_zipper_res4.ply";

    float yoffset = 0.4;
    {
        mesh = loader.load( model );
        auto bounds = mesh->getAxisAlignedBounds();

        mesh->material = std::make_shared<RefractiveMaterial>(N_AIR);

        mesh->transform = std::make_shared<Transform>();
        *mesh->transform = compose( makeTranslation( Vector4( -2.0 * spacing, yoffset, 2.0 ) ),
                                    makeScaling( 3, 3, 3 ),
                                    rotation,
                                    makeTranslation( Vector4( 0.0, -bounds->ymin, 0.0 ) ) );
        container->add( mesh );
    }

    {
        mesh = loader.load( model );
        auto bounds = mesh->getAxisAlignedBounds();

        mesh->material = std::make_shared<RefractiveMaterial>(N_WATER);

        mesh->transform = std::make_shared<Transform>();
        *mesh->transform = compose( makeTranslation( Vector4( -1.0 * spacing, yoffset, 2.0 ) ),
                                    makeScaling( 3, 3, 3 ),
                                    rotation,
                                    makeTranslation( Vector4( 0.0, -bounds->ymin, 0.0 ) ) );
        container->add( mesh );
    }

    {
        mesh = loader.load( model );
        auto bounds = mesh->getAxisAlignedBounds();

        mesh->material = std::make_shared<RefractiveMaterial>(N_PLEXIGLAS);

        mesh->transform = std::make_shared<Transform>();
        *mesh->transform = compose( makeTranslation( Vector4( 0.0, yoffset, 2.0 ) ),
                                    makeScaling( 3, 3, 3 ),
                                    rotation,
                                    makeTranslation( Vector4( 0.0, -bounds->ymin, 0.0 ) ) );
        container->add( mesh );
    }

    {
        mesh = loader.load( model );
        auto bounds = mesh->getAxisAlignedBounds();

        mesh->material = std::make_shared<RefractiveMaterial>(N_FLINT_GLASS);

        mesh->transform = std::make_shared<Transform>();
        *mesh->transform = compose( makeTranslation( Vector4( 1.0 * spacing, yoffset, 2.0 ) ),
                                    makeScaling( 3, 3, 3 ),
                                    rotation,
                                    makeTranslation( Vector4( 0.0, -bounds->ymin, 0.0 ) ) );
        container->add( mesh );
    }

    {
        mesh = loader.load( model );
        auto bounds = mesh->getAxisAlignedBounds();

        mesh->material = std::make_shared<RefractiveMaterial>(N_DIAMOND);

        mesh->transform = std::make_shared<Transform>();
        *mesh->transform = compose( makeTranslation( Vector4( 2.0 * spacing, yoffset, 2.0 ) ),
                                    makeScaling( 3, 3, 3 ),
                                    rotation,
                                    makeTranslation( Vector4( 0.0, -bounds->ymin, 0.0 ) ) );
        container->add( mesh );
    }

    // Walls
#if 1
    auto wall = std::make_shared<AxisAlignedSlab>( -10.0, 0.0, -10.0,
                                     +10.0, 10.0, -10.0 );
    wall->material = std::make_shared<DiffuseMaterial>( 0.8, 0.8, 1.0 );
    container->add( wall );
#endif

    // Colored strips to show refraction from background objects
    auto cube = std::make_shared<AxisAlignedSlab>( -10.0, 0.0, -2.0,
                                     +10.0, 0.15, -2.15 );
    cube->material = std::make_shared<DiffuseMaterial>( 0.5, 0.5, 1.0 );
    container->add( cube );

    cube = std::make_shared<AxisAlignedSlab>( -10.0, 0.5 + 0.0, -2.0,
                                +10.0, 0.5 + 0.15, -2.15 );
    cube->material = std::make_shared<DiffuseMaterial>( 1.0, 0.5, 0.0 );
    container->add( cube );

    cube = std::make_shared<AxisAlignedSlab>( -10.0, 1.0 + 0.0, -2.0,
                                +10.0, 1.0 + 0.15, -2.15 );
    cube->material = std::make_shared<DiffuseMaterial>( 0.0, 1.0, 0.5 );
    container->add( cube );
	scene->root = container;

	scene->root = container;
    auto arc_light = std::make_shared<ArcLightEnvironmentMap>( Vector4(0, 1, 0), M_PI * 0.1 );
    arc_light->setPower( 3.0f );
    scene->env_map = arc_light;
    tracer->scene = scene;

    tracer->shader = new BasicDiffuseSpecularShader();

    // Camera back and rotated a bit around x so we're looking slightly down
    tracer->setCameraTransform( compose( makeRotation( -0.2, Vector4(1, 0, 0) ),
                                         makeTranslation( 0.0, 1.0, 15.0 ) ) );
);
END_SCENE()
